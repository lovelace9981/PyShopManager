Triggers pendientes 
----------------------------------------------
Trigger para comprobar que el cliente que realiza un pedido existe en la base de datos.

Trigger para comprobar que el pedido que elige el repartidor para repartir tiene la informacion correcta.

i
FRONTEND - COMUN
----------------------------------------------

Autenticacion
Menu basico


FRONTEND - MENSAJERIA (SUBSISTEMA ADRI)
----------------------------------------------
-- IMPORTANTE: Los ID se almacenan en una variable global *que remedio*, para controlar quien es la persona que esta gestionando y usarlo para los filtros de las consultas.

Consultar envios pendientes -- Vista SQL
Seleccion de Pedido a Repartir -- Trigger de seleccion de envio correcto
-- Consultar envios propios, es decir los pedidos que le corresponden al propio repartidor no los pedidos generales en almacen, si no se filtran por los que vaya a repartir por su ID y EN_REPARTO
Modificar datos de envio -- Trigger de seleccion del pedido correcto
Cancelar envio -- 
Confirmar envio -- Consulta de pedidos filtrados por el ID_REPARTIDOR y EN REPARTO
                -- SELECT * FROM PEDIDO WHERE ID_REPARTIDOR=VARIABLE_REPARTIDOR_ID_PYTHON AND EN_REPARTO=1

Esquema de que se hace en este SUBSISTEMA

-- Se muestran todos los pedidos pendientes y que no esten en reparto. Para visualizar los que queden en el almacen.
SELECT * FROM PEDIDOS WHERE EN_REPARTO=0;
-- Se selecciona los pedidos con el anterior uno por uno y se le indica en Seleccion de pedido a repartir.
-- Aqui hay un trigger de comprobacion de pedido correcto. Y el trigger deberia ser mejorado para que no solo no se introduzca uno incorrecto si no que si te 
-- equivocas en un codigo a lo mejor ese pedido existe pero esta EN_REPARTO por otro. Ya que se modifican los datos de ID_REPARTIDOR con un UPDATE, entonces
-- se pierde la integridad de los datos.

-- Modificar datos de envio
-- El repartidor debe en este menu visualizar sus pedidos y seleccionar los suyos -- TRIGGER de seleccion correcta de pedido por su propio ID y en reparto. Recordemos que usamos la variable global para filtrar su informacion.
-- Y introduce uno que lo comprueba el trigger y finalmente se introducen los datos a cambiar consistentes en desplazar la fecha de entrega al cliente.

-- Cancelar envio
-- El repartidor previa comunicacion de terceros o del propio almacen. Devuelve el pedido al almacen y vuelve a la tabla global de repartos cambiando su estado de EN_REPARTO a 0.

-- Confirmacion de envios.
-- El repartidor selecciona su envio realizado por su ID y el atributo EN_REPARTO pasa a 0 y el atributo ENTREGADO a 1.
-- MISMO TRIGGER QUE cancelar envio y modificar datos de envio. y los anteriores.


-- Resumen de triggers.
-- Hay un trigger de seleccion de pedidos 
-- Hay un trigger de seleccion que filtra por ID_REPARTIDOR y EN_REPARTO *Este es para modificar, cancelar y confirmacion de envio

FRONTEND - EMPLEADO (SUBSISTEMA PEDRO)
----------------------------------------------
Dar de alta cliente
Dar de baja cliente -- Trigger de seleccion de cliente correcto
Mostrar listado de ventas --Vista SQL
Mostrar Stock de almacen --Vista SQL
Introducir Producto nuevo
Pedir Sotck -- Trigger de seleccion de producto correcto

-- Dar de alta cliente
-- El empleado obtiene los datos de un cliente (nombre, telefono, direccion, codigo postal y contraseña)
-- e inserta en la tabla de clientes una entrada para ese cliente. Antes de introducir el cliente, un disparador
-- rellena el campo de ID_EMPLEADO_ALTA.

-- Dar de baja cliente
-- El empleado obtiene el ID del cliente que desea darse de baja. Un disparador comprueba si existe
-- el ID del cliente. El empleado elimina su tupla y un disparador añade a esa tupla el dato de ID_EMPLEADO_BAJA. 

-- Mostrar listado de ventas
-- Un select de todos los pedidos realizados. 

-- Mostrar Stock de almacen
-- Un select de todos los productos disponibles en Stock

-- Introducir Producto nuevo
-- el empleado introduce la informacion de un nuevo producto (nombre y cantidad) y se añade un nuevo producto 
-- con dicha info.

-- Pedir stock
-- El empleado introduce un ID_PRODUCTO y una cantidad a pedir para reponer el stock. Un trigger comprueba
-- si existe ese producto en la tabla de stock. Si existe, se actualiza la cantidad de ese producto.

FRONTEND - CLIENTE (SIMPLE)
----------------------------------------------

Hacer pedido
-- El cliente se le ofrecera una vista donde puede visualizar los pedidos disponibles > 0 en stock y que este seleccione uno y la cantidad.
-- Trigger de comprobacion de seleccion de producto correcto.
-- Trigger de la cantidad introducida no supere la cantidad existente. Debe ser <=
